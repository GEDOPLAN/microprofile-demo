<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>de.gedoplan</groupId>
    <artifactId>build-master</artifactId>
    <version>2020.9.1</version>
    <relativePath></relativePath>
  </parent>

  <groupId>de.gedoplan.showcase</groupId>
  <artifactId>microprofile-demo</artifactId>
  <version>4.0-SNAPSHOT</version>

  <packaging>${packaging.type}</packaging>

  <properties>
    <packaging.type>war</packaging.type>

    <java.code.version>11</java.code.version>

    <payara.version>5.2021.4</payara.version>

    <quarkus.platform.artifact-id>quarkus-universe-bom</quarkus.platform.artifact-id>
    <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>
    <quarkus.platform.version>2.0.2.Final</quarkus.platform.version>

    <wildfly.bootable.jar.version>5.0.1.Final</wildfly.bootable.jar.version>

    <wildfly.version>24.0.0.Final</wildfly.version>
  </properties>

  <repositories>
    <repository>
      <id>gedoplanPublic</id>
      <url>http://service.gedoplan.de/nexus/content/groups/public</url>
    </repository>
  </repositories>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>jakarta.platform</groupId>
        <artifactId>jakarta.jakartaee-web-api</artifactId>
        <version>8.0.0</version>
      </dependency>

      <dependency>
        <groupId>org.eclipse.microprofile</groupId>
        <artifactId>microprofile</artifactId>
        <type>pom</type>
        <version>4.1</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.20</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <defaultGoal>package</defaultGoal>
    <finalName>${project.artifactId}</finalName>
  </build>

  <!-- Following are profiles for different project setups / runtime selections -->
  <profiles>

    <!-- Profile for standard JEE - just one dependency -->
    <profile>
      <id>standard-jee</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <dependencies>
        <dependency>
          <groupId>jakarta.platform</groupId>
          <artifactId>jakarta.jakartaee-web-api</artifactId>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>org.eclipse.microprofile</groupId>
          <artifactId>microprofile</artifactId>
          <type>pom</type>
        </dependency>
      </dependencies>
    </profile>
    <!-- End of standard JEE profile -->

    <!-- Profile for WildFly bootable JAR: Standard JEE plus plugin for provisioning a WildFly hollow JAR -->
    <profile>
      <id>wildfly-bootable-jar</id>
      <properties>
        <!-- 
        Bug in WildFly plugin:
        Specifying custom names for the bootable JAR does not work with goal dev-watch. 
        <wildfly.bootable.run.jar.file.name>wildfly-bootable.jar</wildfly.bootable.run.jar.file.name>
        <wildfly.bootable.package.output.file.name>wildfly-bootable.jar</wildfly.bootable.package.output.file.name>
        -->
      </properties>
      <dependencies>
        <dependency>
          <groupId>jakarta.platform</groupId>
          <artifactId>jakarta.jakartaee-web-api</artifactId>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>org.eclipse.microprofile</groupId>
          <artifactId>microprofile</artifactId>
          <type>pom</type>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-jar-maven-plugin</artifactId>
            <version>${wildfly.bootable.jar.version}</version>
            <configuration>
              <feature-pack-location>wildfly@maven(org.jboss.universe:community-universe)#${wildfly.version}</feature-pack-location>
              <layers>
                <layer>jaxrs</layer>
                <layer>cdi</layer>
                <layer>microprofile-platform</layer>
              </layers>
              <excluded-layers>
                <layer>deployment-scanner</layer>
              </excluded-layers>
              <hollow-jar>true</hollow-jar>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>package</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- End of WildFly bootable JAR profile -->

    <!-- Profile for Payara Micro: Standard JEE plus download of Payara Micro -->
    <profile>
      <id>payara-micro</id>
      <dependencies>
        <dependency>
          <groupId>jakarta.platform</groupId>
          <artifactId>jakarta.jakartaee-web-api</artifactId>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>org.eclipse.microprofile</groupId>
          <artifactId>microprofile</artifactId>
          <type>pom</type>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <!-- Download Payara Micro -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>3.0.1</version>
            <inherited>false</inherited>
            <configuration>
              <outputDirectory>${project.build.directory}</outputDirectory>
            </configuration>
            <executions>

              <execution>
                <id>payara-micro</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>fish.payara.extras</groupId>
                      <artifactId>payara-micro</artifactId>
                      <version>${payara.version}</version>
                      <type>jar</type>
                      <destFileName>payara-micro.jar</destFileName>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- End of Payara Micro profile -->

    <!-- Profile for Quarkus: Customized dependencies for the building blocks used plus plugin for build and dev mode -->
    <profile>
      <id>quarkus</id>
      <properties>
        <packaging.type>jar</packaging.type>
      </properties>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>${quarkus.platform.group-id}</groupId>
            <artifactId>${quarkus.platform.artifact-id}</artifactId>
            <version>${quarkus.platform.version}</version>
            <type>pom</type>
            <scope>import</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
      <dependencies>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-arc</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-resteasy-jsonb</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-smallrye-health</artifactId>
        </dependency>
        <dependency>
          <groupId>io.quarkus</groupId>
          <artifactId>quarkus-smallrye-metrics</artifactId>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>${quarkus.platform.group-id}</groupId>
            <artifactId>quarkus-maven-plugin</artifactId>
            <version>${quarkus.platform.version}</version>
            <extensions>true</extensions>
            <configuration>
              <systemProperties>
                <!-- 
                This system property is necessary only because we are switching the maven packaging type
                from war (default) to jar in this profile. 
                See https://github.com/quarkusio/quarkus/issues/9727
                -->
                <quarkus.bootstrap.effective-model-builder>true</quarkus.bootstrap.effective-model-builder>
              </systemProperties>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>build</goal>
                  <goal>generate-code</goal>
                  <goal>generate-code-tests</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                <maven.home>${maven.home}</maven.home>
                <quarkus.bootstrap.effective-model-builder>true</quarkus.bootstrap.effective-model-builder>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- End of Quarkus profile -->
  </profiles>

</project>